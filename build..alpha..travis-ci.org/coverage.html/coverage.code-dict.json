{"/home/travis/build/npmtest/node-npmtest-gulp-stylelint/test.js":"/* istanbul instrument in package npmtest_gulp_stylelint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-stylelint/lib.npmtest_gulp_stylelint.js":"/* istanbul instrument in package npmtest_gulp_stylelint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_stylelint = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_stylelint = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-stylelint/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-stylelint && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_stylelint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_stylelint\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_stylelint.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_stylelint.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_stylelint.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_stylelint.__dirname + '/lib.npmtest_gulp_stylelint.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-stylelint/node_modules/gulp-stylelint/dist/index.js":"'use strict';\n\nvar _stylelint = require('stylelint');\n\nvar _gulpUtil = require('gulp-util');\n\nvar _through = require('through2');\n\nvar _through2 = _interopRequireDefault(_through);\n\nvar _promise = require('promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _deepExtend = require('deep-extend');\n\nvar _deepExtend2 = _interopRequireDefault(_deepExtend);\n\nvar _reporterFactory = require('./reporter-factory');\n\nvar _reporterFactory2 = _interopRequireDefault(_reporterFactory);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Name of this plugin for reporting purposes.\n * @type {String}\n */\n/**\n * Gulp stylelint plugin.\n * @module gulp-stylelint\n */\n\nvar pluginName = 'gulp-stylelint';\n\n/**\n * Stylelint results processor.\n * @param {Object} [options] - Plugin options.\n * @param {String} [options.reportOutputDir] - Common path for all reporters.\n * @param {[Object]} [options.reporters] - Reporter configurations.\n * @param {Boolean} [options.debug] - If true, error stack will be printed.\n * @return {Stream} Object stream usable in Gulp pipes.\n */\nmodule.exports = function gulpStylelint(options) {\n\n  /**\n   * Plugin options with defaults applied.\n   * @type Object\n   */\n  var pluginOptions = (0, _deepExtend2.default)({\n    failAfterError: true,\n    debug: false\n  }, options);\n\n  /**\n   * Lint options for stylelint's `lint` function.\n   * @type Object\n   */\n  var lintOptions = (0, _deepExtend2.default)({}, options);\n\n  /**\n   * List of gulp-stylelint reporters.\n   * @type [Function]\n   */\n  var reporters = (pluginOptions.reporters || []).map(function (config) {\n    return (0, _reporterFactory2.default)(config, pluginOptions);\n  });\n\n  /**\n   * List of stylelint's lint result promises.\n   * @type [Promise]\n   */\n  var lintPromiseList = [];\n\n  // Remove the stylelint options that cannot be used:\n  delete lintOptions.files; // css code will be provided by gulp instead\n  delete lintOptions.formatter; // formatters are defined in the `reporters` option\n\n  // Remove gulp-stylelint options so that they don't interfere with stylelint options:\n  delete lintOptions.reportOutputDir;\n  delete lintOptions.reporters;\n  delete lintOptions.debug;\n\n  /**\n   * Launches linting of a given file, pushes promises to the promise list.\n   *\n   * Note that the files are not modified and are pushed\n   * back to their pipes to allow usage of other plugins.\n   *\n   * @param {File} file - Piped file.\n   * @param {String} encoding - File encoding.\n   * @param {Function} done - File pipe completion callback.\n   * @return {undefined} Nothing is returned (done callback is used instead).\n   */\n  function onFile(file, encoding, done) {\n\n    if (file.isNull()) {\n      done(null, file);\n      return;\n    }\n\n    if (file.isStream()) {\n      this.emit('error', new _gulpUtil.PluginError(pluginName, 'Streaming is not supported'));\n      done();\n      return;\n    }\n\n    var localLintOptions = (0, _deepExtend2.default)({}, lintOptions, {\n      code: file.contents.toString(),\n      codeFilename: file.path\n    });\n\n    lintPromiseList.push((0, _stylelint.lint)(localLintOptions));\n\n    done(null, file);\n  }\n\n  /**\n   * Provides Stylelint result to reporters.\n   * @param {[Object]} lintResults - Stylelint results.\n   * @return {Promise} Resolved with original lint results.\n   */\n  function passLintResultsThroughReporters(lintResults) {\n    var warnings = lintResults.reduce(function (accumulated, res) {\n      return accumulated.concat(res.results);\n    }, []);\n    return _promise2.default.all(reporters.map(function (reporter) {\n      return reporter(warnings);\n    })).then(function () {\n      return lintResults;\n    });\n  }\n\n  /**\n   * Determines if the severity of a stylelint warning is \"error\".\n   * @param {Object} warning - Stylelint results warning.\n   * @return {Boolean} True if warning's severity is \"error\", false otherwise.\n   */\n  function isErrorSeverity(warning) {\n    return warning.severity === 'error';\n  }\n\n  /**\n   * Resolves promises and provides accumulated report to reporters.\n   * @param {Function} done - Stream completion callback.\n   * @return {undefined} Nothing is returned (done callback is used instead).\n   */\n  function onStreamEnd(done) {\n    var _this = this;\n\n    _promise2.default.all(lintPromiseList).then(passLintResultsThroughReporters).then(function (lintResults) {\n      process.nextTick(function () {\n        var errorCount = lintResults.reduce(function (sum, res) {\n          var errors = res.results[0].warnings.filter(isErrorSeverity);\n          return sum + errors.length;\n        }, 0);\n        if (pluginOptions.failAfterError && errorCount > 0) {\n          var errorMessage = 'Failed with ' + errorCount + ' ' + (errorCount === 1 ? 'error' : 'errors');\n          _this.emit('error', new _gulpUtil.PluginError(pluginName, errorMessage));\n        }\n        done();\n      });\n    }).catch(function (error) {\n      process.nextTick(function () {\n        _this.emit('error', new _gulpUtil.PluginError(pluginName, error, {\n          showStack: Boolean(pluginOptions.debug)\n        }));\n        done();\n      });\n    });\n  }\n\n  return _through2.default.obj(onFile, onStreamEnd);\n};\n\n/**\n * Formatters bundled with stylelint by default.\n *\n * User may want to see the list of available formatters,\n * proxy them or pass them as functions instead of strings.\n *\n * @see https://github.com/olegskl/gulp-stylelint/issues/3#issuecomment-197025044\n * @type {Object}\n */\nmodule.exports.formatters = _stylelint.formatters;","/home/travis/build/npmtest/node-npmtest-gulp-stylelint/node_modules/gulp-stylelint/dist/reporter-factory.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = reporterFactory;\n\nvar _gulpUtil = require('gulp-util');\n\nvar _gulpUtil2 = _interopRequireDefault(_gulpUtil);\n\nvar _stylelint = require('stylelint');\n\nvar _writer = require('./writer');\n\nvar _writer2 = _interopRequireDefault(_writer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Creates a reporter from the given config.\n * @param {Object} [config] - Reporter config.\n * @param {Object} [options] - Plugin options.\n * @return {Function} Reporter.\n */\nfunction reporterFactory() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n  /**\n   * Formatter for stylelint results.\n   *\n   * User has a choice of passing a custom formatter function,\n   * or a name of formatter bundled with stylelint by default.\n   *\n   * @type {Function}\n   */\n  var formatter = typeof config.formatter === 'string' ? _stylelint.formatters[config.formatter] : config.formatter;\n\n  /**\n   * Reporter.\n   * @param {[Object]} results - Array of stylelint results.\n   * @return {Promise} Resolved when writer and logger are done.\n   */\n  return function reporter(results) {\n\n    /**\n     * Async tasks performed by the reporter.\n     * @type [Promise]\n     */\n    var asyncTasks = [];\n\n    /**\n     * Formatter output.\n     * @type String\n     */\n    var formattedText = formatter(results);\n\n    if (config.console && formattedText.trim()) {\n      asyncTasks.push(_gulpUtil2.default.log('\\n' + formattedText + '\\n'));\n    }\n\n    if (config.save) {\n      asyncTasks.push((0, _writer2.default)(formattedText, config.save, options.reportOutputDir));\n    }\n\n    return Promise.all(asyncTasks);\n  };\n} /**\n   * Gulp stylelint reporter factory.\n   * @module gulp-stylelint/reporter-factory\n   */","/home/travis/build/npmtest/node-npmtest-gulp-stylelint/node_modules/gulp-stylelint/dist/writer.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = writer;\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _mkdirp = require('mkdirp');\n\nvar _mkdirp2 = _interopRequireDefault(_mkdirp);\n\nvar _chalk = require('chalk');\n\nvar _promise = require('promise');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar mkdir = (0, _promise.denodeify)(_mkdirp2.default); /**\n                                                        * Gulp stylelint writer.\n                                                        * @module gulp-stylelint/writer\n                                                        */\n\nvar writeFile = (0, _promise.denodeify)(_fs2.default.writeFile);\n\n/**\n * Creates the output folder and writes formatted text to a file.\n * @param {String} text - Text to write (may be color-coded).\n * @param {String} dest - Destination path relative to destRoot.\n * @param {String} [destRoot] - Destination root folder, defaults to cwd.\n * @return {Promise} Resolved when folder is created and file is written.\n */\nfunction writer(text, dest) {\n  var destRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : process.cwd();\n\n  var fullpath = _path2.default.resolve(destRoot, dest);\n  return mkdir(_path2.default.dirname(fullpath)).then(function () {\n    return writeFile(fullpath, (0, _chalk.stripColor)(text));\n  });\n}"}